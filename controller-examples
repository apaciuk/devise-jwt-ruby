# Path: app/controllers/api/v1/users_controller.rb
class Api::V1::UsersController < ApplicationController
    def create
        user = User.create!(user_params)
        token = JwtService.encode(payload: { user_id: user.id })
        render json: { token: token }, status: :created
    end

    private

    def user_params
        params.permit(:email, :password, :password_confirmation)
    end
end

 token = JwtService.encode(payload: { 'sub' => resource.email })
        header = { 'Authorization' => 'Bearer ' + token }
        header.each do |key, value|
            response.headers[key] = value
        end
        render json: {
            email: resource.email,
            token: token,
            status: {
            code: 200,
            message: 'Logged in successfully'
            }
        }, status: :ok, location: after_sign_in_path_for(resource)

# Path: app/controllers/api/v1/sessions_controller.rb
class Api::V1::SessionsController < ApplicationController
    def create
        user = User.find_by(email: params[:email])
        if user&.authenticate(params[:password])
            token = JwtService.encode(payload: { user_id: user.id })
            render json: { token: token }, status: :ok
        else
            render json: { error: 'unauthorized' }, status: :unauthorized
        end
    end
end

# Path: app/controllers/api/v1/notes_controller.rb
class Api::V1::NotesController < ApplicationController
    before_action :authorize_request

    def index
        notes = Note.where(user_id: @current_user.id)
        render json: notes, status: :ok
    end

    def create
        note = Note.create!(note_params.merge(user_id: @current_user.id))
        render json: note, status: :created
    end

    private

    def note_params
        params.permit(:title, :body)
    end

    def authorize_request
        header = request.headers['Authorization']
        header = header.split(' ').last if header
        begin
            @decoded = JwtService.decode(token: header)
            @current_user = User.find(@decoded[:user_id])
        rescue ActiveRecord::RecordNotFound => e
            render json: { errors: e.message }, status: :unauthorized
        rescue JWT::DecodeError => e
            render json: { errors: e.message }, status: :unauthorized
        end
    end

end
